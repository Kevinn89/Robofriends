{"ast":null,"code":"import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants.js';\nexport var setSearch = function setSearch(text) {\n  return {\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n  };\n};\nexport var requestRobots = function requestRobots(dispatch) {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING\n  });\n  fetch('http://jsonplaceholder.typicode.com/users').then(function (response) {\n    return response.json();\n  }).then(function (data) {\n    return dispatch({\n      type: REQUEST_ROBOTS_SUCCESS,\n      payload: data\n    });\n  }).catch(function (error) {\n    return dispatch({\n      type: REQUEST_ROBOTS_FAILED,\n      payload: error\n    });\n  });\n};","map":{"version":3,"sources":["/Users/kevinnmitchell/Desktop/Robofriends/src/actions.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","setSearch","text","type","payload","requestRobots","dispatch","fetch","then","response","json","data","catch","error"],"mappings":"AAAA,SAAQA,mBAAR,EACIC,sBADJ,EAEIC,sBAFJ,EAGIC,qBAHJ,QAIO,gBAJP;AAOA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,IAAD;AAAA,SAAW;AACpCC,IAAAA,IAAI,EAACN,mBAD+B;AAEpCO,IAAAA,OAAO,EAAEF;AAF2B,GAAX;AAAA,CAAlB;AAKP,OAAO,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,CAACC,QAAD,EAAc;AACnCA,EAAAA,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEL;AAAR,GAAD,CAAR;AACAS,EAAAA,KAAK,CAAC,2CAAD,CAAL,CACCC,IADD,CACM,UAAAC,QAAQ;AAAA,WAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,GADd,EAECF,IAFD,CAEM,UAAAG,IAAI;AAAA,WAAIL,QAAQ,CAAC;AAAEH,MAAAA,IAAI,EAAEJ,sBAAR;AAAgCK,MAAAA,OAAO,EAAEO;AAAzC,KAAD,CAAZ;AAAA,GAFV,EAGCC,KAHD,CAGO,UAAAC,KAAK;AAAA,WAAIP,QAAQ,CAAC;AAACH,MAAAA,IAAI,EAAEH,qBAAP;AAA8BI,MAAAA,OAAO,EAAES;AAAvC,KAAD,CAAZ;AAAA,GAHZ;AAIH,CANE","sourcesContent":["import {CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\n\nexport const setSearch = (text) => ({\ntype:CHANGE_SEARCH_FIELD,\npayload: text\n})\n\nexport const requestRobots = (dispatch) => {\n        dispatch({ type: REQUEST_ROBOTS_PENDING})\n        fetch('http://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n    }\n\n\n"]},"metadata":{},"sourceType":"module"}